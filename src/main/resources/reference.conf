wookiee-cluster {
  manager = "com.webtrends.harness.component.cluster.ClusterManager"
  enabled = true
  dynamic-component = true
  # See the documentation here: http://doc.akka.io/docs/akka/2.2.0/general/configuration.html#akka-cluster
  base-path = "/discovery/clusters"
  random-seed-nodes = 3
  persist-leader = off

  jmx.enabled = off

  # Enable/disable info level logging of cluster events
  log-info = on
  auto-down-unreachable-after = 10s

  # Utilize a dispatcher specific for cluster events
  use-dispatcher = "akka.cluster.cluster-dispatcher"
  metrics {
    enabled = off
  }
  failure-detector {
    threshold = 10
    heartbeat-interval = 1s
    acceptable-heartbeat-pause = 5s
  }
  cluster-dispatcher {
    type = "Dispatcher"
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 2
      parallelism-max = 4
    }
  }
}
wookiee-zookeeper {
  dynamic-component = false
}
message-processor {
  # How often the MessageProcessor should share it's subscription information
  share-interval = 1s
  # When should MessageTopicProcessor instances be removed after there are no longer any subscribers for that topic
  trash-interval = 30s
  # The default send timeout
  default-send-timeout = 2s
}
akka {
  actor {
    debug {
      lifecycle = on
      receive = on
      autoreceive = on
    }
    serializers {
      #kryo = "com.webtrends.harness.communication.KryoSerializer"
    }

    serialization-bindings {
      #"com.webtrends.communication.Message" = kryo
    }

    kryo {
      #FIX
      kryo-custom-serializer-init = "com.webtrends.communication.KryoInit"
    }

    #provider = "akka.actor.LocalActorRefProvider"
    provider = "akka.cluster.ClusterActorRefProvider"
    #provider = "akka.remote.RemoteActorRefvProvider"
  }
}
